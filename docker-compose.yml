version: "3.9"

services:
  mcp-server:
    build: .
    container_name: mcp-server
    depends_on:
      init-db:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      POSTGRES_DSN: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      REDIS_URL: redis://${REDIS_HOST}:${REDIS_PORT}/0
      SQLSERVER_DSN: Driver={ODBC Driver 18 for SQL Server};Server=${SQLSERVER_HOST},${SQLSERVER_PORT};Database=${SQLSERVER_DB};Uid=${SQLSERVER_USER};Pwd=${SQLSERVER_PASSWORD};Encrypt=no
      APP_ENV: development
      LOG_LEVEL: info
      PYTHONPATH: /app/src
      MSSQL_PASS_1: ${MSSQL_PASS_1}
    ports:
      - "${MCP_SERVER_PORT}:8080"
    volumes:
      - ./src:/app/src
      - ./sql:/app/sql
      - ./config:/app/config
    restart: on-failure

  postgres:
    image: postgres:16
    container_name: postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redisdata:/data
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 3

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    env_file:
      - .env
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: ${SQLSERVER_PASSWORD}
      MSSQL_PID: "Developer"
    ports:
      - "${SQLSERVER_PORT}:1433"
    volumes:
      - sqlserverdata:/var/opt/mssql
      - ./sql:/sql
    healthcheck:
      test: /opt/mssql-tools18/bin/sqlcmd -S localhost -U ${SQLSERVER_USER} -P ${SQLSERVER_PASSWORD} -Q "SELECT 1" -C
      interval: 20s
      retries: 10

  init-db:
    build:
      context: .
      dockerfile: Dockerfile.init
    container_name: init-db
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      sqlserver:
        condition: service_healthy
    volumes:
      - ./scripts/init-db.sh:/scripts/init-db.sh
      - ./sql:/sql
    entrypoint: ["/bin/bash", "/scripts/init-db.sh"]
    restart: "no"

volumes:
  pgdata:
  redisdata:
  sqlserverdata: